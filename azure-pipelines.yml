trigger:
  branches:
    include:
      - main
      - develop

pool:
  vmImage: 'ubuntu-latest'

variables:
  - name: dockerRegistryServiceConnection
    value: 'YourDockerRegistryServiceConnection'
  - name: tag
    value: '$(Build.BuildId)'
  - name: backendImageName
    value: 'proposalgen-backend'
  - name: frontendImageName
    value: 'proposalgen-frontend'
  - name: azureSubscription
    value: 'YourAzureSubscriptionServiceConnection'
  - name: resourceGroupName
    value: 'proposalgen-rg'
  - name: location
    value: 'eastus'

stages:
- stage: Build
  displayName: Build and Push
  jobs:
  - job: BuildAndPush
    displayName: Build and Push Images
    steps:
    - task: Docker@2
      displayName: Build and Push Backend Image
      inputs:
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(backendImageName)
        command: buildAndPush
        Dockerfile: backend/Dockerfile
        buildContext: backend
        tags: |
          $(tag)
          latest

    - task: Docker@2
      displayName: Build and Push Frontend Image
      inputs:
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(frontendImageName)
        command: buildAndPush
        Dockerfile: frontend/Dockerfile
        buildContext: frontend
        tags: |
          $(tag)
          latest

    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: |
          docker-compose.yml
          azure-resources.bicep
          .env
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
      displayName: 'Copy Files to Artifact Staging Directory'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
      displayName: 'Publish Artifacts'

- stage: Deploy
  displayName: Deploy to Azure
  dependsOn: Build
  jobs:
  - job: DeployToAzure
    displayName: Deploy to Azure
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'
      displayName: 'Download Build Artifacts'

    - task: AzureCLI@2
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Create resource group if it doesn't exist
          az group create --name $(resourceGroupName) --location $(location)
          
          # Replace placeholders in the .env file
          sed -i 's|your-registry-url|$(containerRegistry.loginServer)|g' $(System.ArtifactsDirectory)/drop/.env
          sed -i 's|latest|$(tag)|g' $(System.ArtifactsDirectory)/drop/.env
          
          # Deploy Bicep template
          az deployment group create \
            --resource-group $(resourceGroupName) \
            --template-file $(System.ArtifactsDirectory)/drop/azure-resources.bicep \
            --parameters \
              baseName=proposalgen \
              dockerRegistryServerUrl=$(containerRegistry.loginServer) \
              dockerRegistryServerUsername=$(containerRegistry.username) \
              dockerRegistryServerPassword=$(containerRegistry.password) \
              azureOpenAiEndpoint=$(azureOpenAiEndpoint) \
              azureOpenAiApiKey=$(azureOpenAiApiKey) \
              openAiApiVersion=$(openAiApiVersion) \
              azureDeploymentName=$(azureDeploymentName) \
              jwtSecret=$(jwtSecret) \
              postgresAdminLogin=$(postgresAdminLogin) \
              postgresAdminPassword=$(postgresAdminPassword)
      displayName: 'Deploy to Azure'
      env:
        azureOpenAiEndpoint: $(azureOpenAiEndpoint)
        azureOpenAiApiKey: $(azureOpenAiApiKey)
        openAiApiVersion: $(openAiApiVersion)
        azureDeploymentName: $(azureDeploymentName)
        jwtSecret: $(jwtSecret)
        postgresAdminLogin: $(postgresAdminLogin)
        postgresAdminPassword: $(postgresAdminPassword)