version: '3.8'

services:

  nginx-proxy:
    build:
      context: ./nginx-proxy
    image: ${REGISTRY_LOGIN_SERVER}/proposalgen-nginx:${IMAGE_TAG}
    restart: always
    ports:
      - "80:80"
    depends_on:
      - frontend
      - backend

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_BACKEND_URL=http://${AZURE_WEBAPP_NAME}.azurewebsites.net:8502/api
    image: ${REGISTRY_LOGIN_SERVER}/proposalgen-frontend:${IMAGE_TAG}
    restart: always
    environment:
      - VITE_BACKEND_URL=/api
    ports:
      - "8503:80"
    depends_on:
      - backend

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: ${REGISTRY_LOGIN_SERVER}/proposalgen-backend:${IMAGE_TAG}
    restart: always
    ports:
      - "8502:8502"
    environment:
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - OPENAI_API_VERSION=${OPENAI_API_VERSION}
      - AZURE_DEPLOYMENT_NAME=${AZURE_DEPLOYMENT_NAME}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      - redis
    # Note: No volumes used as they're not supported in Azure Multi-container App Service

  # Using external Azure Database for PostgreSQL instead of container
  # For local development, use docker-compose-local.yml which includes a containerized database
  
  # Redis cache for session management
  redis:
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    # Note: No volumes used as they're not supported in Azure Multi-container App Service